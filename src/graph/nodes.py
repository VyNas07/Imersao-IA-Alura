"""
N√≥s do grafo LangGraph para processamento de Service Desk.

Cada n√≥ representa uma etapa espec√≠fica do processamento e recebe
o estado atual, processa e retorna o estado atualizado.
"""
from typing import Dict, Any
from src.graph.state import ServiceDeskState
from src.chains import TriagemChain
from src.tools.rag_local import RAGSystemLocal


class ServiceDeskNodes:
    """
    Classe que cont√©m todos os n√≥s do grafo de Service Desk.
    
    Cada m√©todo representa um n√≥ do grafo e recebe o estado atual,
    processa a informa√ß√£o e retorna o estado atualizado.
    """
    
    def __init__(self):
        """Inicializa os n√≥s com as depend√™ncias necess√°rias."""
        self.triagem_chain = TriagemChain()
        self.rag_system = None  # Ser√° inicializado quando necess√°rio
    
    def _inicializar_rag(self) -> None:
        """Inicializa o sistema RAG se ainda n√£o foi inicializado."""
        if self.rag_system is None:
            self.rag_system = RAGSystemLocal()
            self.rag_system.inicializar()
    
    def executar_triagem(self, state: ServiceDeskState) -> ServiceDeskState:
        """
        N√≥ de triagem: classifica a mensagem do usu√°rio.
        
        Args:
            state: Estado atual do grafo
            
        Returns:
            Estado atualizado com resultado da triagem
        """
        try:
            print("üîç Executando triagem...")
            
            # Executa a triagem
            resultado_triagem = self.triagem_chain.processar(state.mensagem_original)
            
            # Atualiza o estado
            state.triagem = resultado_triagem
            state.decisao = resultado_triagem['decis√£o']
            state.urgencia = resultado_triagem['urgencia']
            state.campos_faltantes = resultado_triagem['campos_faltantes']
            
            # Determina se precisa de mais informa√ß√µes
            state.precisa_mais_info = state.decisao == "PEDIR_INFO"
            
            print(f"‚úÖ Triagem conclu√≠da: {state.decisao} - {state.urgencia}")
            
        except Exception as e:
            state.erro = f"Erro na triagem: {e}"
            print(f"‚ùå Erro na triagem: {e}")
        
        return state
    
    def executar_rag(self, state: ServiceDeskState) -> ServiceDeskState:
        """
        N√≥ de RAG: busca informa√ß√µes nas pol√≠ticas da empresa.
        
        Args:
            state: Estado atual do grafo
            
        Returns:
            Estado atualizado com resposta do RAG
        """
        try:
            # S√≥ executa RAG se for AUTO_RESOLVER ou PEDIR_INFO
            if state.decisao not in ["AUTO_RESOLVER", "PEDIR_INFO"]:
                print("‚è≠Ô∏è Pulando RAG - n√£o necess√°rio para esta decis√£o")
                return state
            
            print("üìö Executando busca RAG...")
            
            # Inicializa RAG se necess√°rio
            self._inicializar_rag()
            
            # Executa a busca
            resultado_rag = self.rag_system.consultar(state.mensagem_original)
            
            # Atualiza o estado
            state.resposta_rag = resultado_rag['resposta']
            state.documentos_relevantes = resultado_rag['documentos_relevantes']
            
            print(f"‚úÖ RAG conclu√≠do: {len(state.documentos_relevantes)} documentos consultados")
            
        except Exception as e:
            state.erro = f"Erro no RAG: {e}"
            print(f"‚ùå Erro no RAG: {e}")
        
        return state
    
    def gerar_recomendacao(self, state: ServiceDeskState) -> ServiceDeskState:
        """
        N√≥ de recomenda√ß√£o: gera recomenda√ß√£o baseada na an√°lise.
        
        Args:
            state: Estado atual do grafo
            
        Returns:
            Estado atualizado com recomenda√ß√£o
        """
        try:
            print("üí° Gerando recomenda√ß√£o...")
            
            # Gera recomenda√ß√£o baseada na decis√£o
            if state.decisao == "AUTO_RESOLVER":
                if state.resposta_rag:
                    state.recomendacao = (
                        "‚úÖ Esta solicita√ß√£o pode ser respondida automaticamente. "
                        f"Resposta baseada nas pol√≠ticas: {state.resposta_rag[:200]}..."
                    )
                else:
                    state.recomendacao = (
                        "‚úÖ Esta solicita√ß√£o pode ser respondida automaticamente "
                        "com base nas pol√≠ticas da empresa."
                    )
                state.acao_sugerida = "Responder automaticamente"
                
            elif state.decisao == "PEDIR_INFO":
                campos = ', '.join(state.campos_faltantes) if state.campos_faltantes else 'informa√ß√µes espec√≠ficas'
                state.recomendacao = (
                    f"‚ùì Solicite mais informa√ß√µes do usu√°rio: {campos}. "
                    f"{state.resposta_rag[:100] if state.resposta_rag else ''}"
                )
                state.acao_sugerida = "Solicitar mais informa√ß√µes"
                
            else:  # ABRIR_CHAMADO
                state.recomendacao = (
                    f"üé´ Abra um chamado no sistema de Service Desk. "
                    f"Urg√™ncia: {state.urgencia}. "
                    "Motivo: Solicita√ß√£o que requer processamento manual."
                )
                state.acao_sugerida = self._determinar_acao_chamado(state.urgencia)
            
            print(f"‚úÖ Recomenda√ß√£o gerada: {state.acao_sugerida}")
            
        except Exception as e:
            state.erro = f"Erro ao gerar recomenda√ß√£o: {e}"
            print(f"‚ùå Erro ao gerar recomenda√ß√£o: {e}")
        
        return state
    
    def solicitar_mais_info(self, state: ServiceDeskState) -> ServiceDeskState:
        """
        N√≥ para solicitar mais informa√ß√µes do usu√°rio.
        
        Args:
            state: Estado atual do grafo
            
        Returns:
            Estado atualizado com solicita√ß√£o de informa√ß√µes
        """
        try:
            print("‚ùì Solicitando mais informa√ß√µes...")
            
            # Incrementa tentativas
            state.tentativas += 1
            
            # Gera mensagem de solicita√ß√£o
            if state.campos_faltantes:
                campos = ', '.join(state.campos_faltantes)
                state.recomendacao = f"‚ùì Para melhor atend√™-lo, preciso saber mais sobre: {campos}"
            else:
                state.recomendacao = "‚ùì Para melhor atend√™-lo, preciso de mais informa√ß√µes espec√≠ficas sobre sua solicita√ß√£o."
            
            state.acao_sugerida = "Solicitar mais informa√ß√µes"
            
            # Verifica se excedeu o limite de tentativas
            if state.tentativas >= state.max_tentativas:
                state.recomendacao += " (Limite de tentativas atingido. Abrindo chamado.)"
                state.acao_sugerida = "Abrir chamado ap√≥s limite de tentativas"
                state.precisa_mais_info = False
            
            print(f"‚úÖ Solicita√ß√£o de informa√ß√µes gerada (tentativa {state.tentativas})")
            
        except Exception as e:
            state.erro = f"Erro ao solicitar informa√ß√µes: {e}"
            print(f"‚ùå Erro ao solicitar informa√ß√µes: {e}")
        
        return state
    
    def finalizar_processamento(self, state: ServiceDeskState) -> ServiceDeskState:
        """
        N√≥ final: marca o processamento como finalizado.
        
        Args:
            state: Estado atual do grafo
            
        Returns:
            Estado finalizado
        """
        print("üèÅ Finalizando processamento...")
        state.finalizado = True
        print("‚úÖ Processamento finalizado!")
        return state
    
    def _determinar_acao_chamado(self, urgencia: str) -> str:
        """
        Determina a a√ß√£o espec√≠fica para abertura de chamado.
        
        Args:
            urgencia: N√≠vel de urg√™ncia
            
        Returns:
            A√ß√£o sugerida para o chamado
        """
        if urgencia == "ALTA":
            return "Abrir chamado URGENTE"
        elif urgencia == "MEDIA":
            return "Abrir chamado normal"
        else:
            return "Abrir chamado de baixa prioridade"
