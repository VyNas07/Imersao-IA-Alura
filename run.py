"""
Script principal para executar o sistema de Service Desk com IA.

Este script oferece uma interface simples e direta para interagir com o sistema
de Service Desk que combina triagem autom√°tica e RAG para processar solicita√ß√µes
de usu√°rios e consultar pol√≠ticas da empresa.

Uso:
    python run.py

Funcionalidades:
    - Triagem autom√°tica de mensagens
    - Consulta inteligente em pol√≠ticas (RAG)
    - Recomenda√ß√µes baseadas em IA
    - Interface amig√°vel no terminal

"""
from typing import Dict, Any
from src.agents import ServiceDeskAgent
from src.config.settings import GOOGLE_API_KEY, validar_configuracao


def exibir_cabecalho() -> None:
    """Exibe o cabe√ßalho do sistema."""
    print("üè¢ SISTEMA DE SERVICE DESK - CARRARO DESENVOLVIMENTO")
    print("=" * 60)
    print("ü§ñ Sistema inteligente de triagem e consulta de pol√≠ticas")
    print("=" * 60)


def verificar_configuracao() -> bool:
    """
    Verifica se a configura√ß√£o est√° correta.
    
    Returns:
        True se a configura√ß√£o est√° v√°lida, False caso contr√°rio
    """
    if not validar_configuracao():
        print("‚ùå Erro: GOOGLE_API_KEY n√£o configurada no .env")
        print("üí° Crie um arquivo .env com: GOOGLE_API_KEY=sua_chave_aqui")
        print("üìñ Consulte o README.md para mais informa√ß√µes")
        return False
    return True


def exibir_resultado(resultado: Dict[str, Any]) -> None:
    """
    Exibe o resultado do processamento de forma organizada.
    
    Args:
        resultado: Resultado do processamento da solicita√ß√£o
    """
    # Informa√ß√µes de triagem
    print(f"\nüìä TRIAGEM:")
    print(f"   Decis√£o: {resultado['triagem']['decis√£o']}")
    print(f"   Urg√™ncia: {resultado['triagem']['urgencia']}")
    
    if resultado['triagem']['campos_faltantes']:
        print(f"   Campos faltantes: {', '.join(resultado['triagem']['campos_faltantes'])}")
    
    # Resposta do RAG (se dispon√≠vel)
    if resultado['resposta_rag']:
        print(f"\nüí° RESPOSTA:")
        print(f"   {resultado['resposta_rag']}")
    
    # Recomenda√ß√£o e a√ß√£o sugerida
    print(f"\nüéØ RECOMENDA√á√ÉO:")
    print(f"   {resultado['recomendacao']}")
    print(f"\n‚ö° A√á√ÉO SUGERIDA: {resultado['acao_sugerida']}")
    
    # Documentos consultados
    if resultado['documentos_relevantes']:
        print(f"\nüìÑ Documentos consultados:")
        for doc in resultado['documentos_relevantes']:
            print(f"   ‚Ä¢ {doc['fonte'].split('/')[-1]}")


def processar_entrada_usuario(agent: ServiceDeskAgent) -> None:
    """
    Processa as entradas do usu√°rio em loop cont√≠nuo.
    
    Args:
        agent: Inst√¢ncia do agente de Service Desk
    """
    print("‚úÖ Sistema pronto! Digite suas perguntas ou 'sair' para encerrar.\n")
    
    while True:
        try:
            # Solicita entrada do usu√°rio
            pergunta = input("üë§ Voc√™: ").strip()
            
            # Verifica se o usu√°rio quer sair
            if pergunta.lower() in ['sair', 'exit', 'quit', '']:
                print("üëã Obrigado por usar o sistema! At√© logo!")
                break
            
            # Processa a solicita√ß√£o
            print("\nü§ñ Processando...")
            resultado = agent.processar_solicitacao(pergunta)
            
            # Exibe o resultado
            exibir_resultado(resultado)
            print("\n" + "-" * 60 + "\n")
            
        except KeyboardInterrupt:
            print("\n\nüëã Sistema interrompido. At√© logo!")
            break
        except Exception as e:
            print(f"‚ùå Erro: {e}")
            print("Tente novamente ou digite 'sair' para encerrar.\n")


def main() -> None:
    """
    Fun√ß√£o principal do sistema.
    
    Inicializa o sistema, verifica configura√ß√µes e inicia o loop de intera√ß√£o
    com o usu√°rio.
    """
    # Exibe cabe√ßalho
    exibir_cabecalho()
    
    # Verifica configura√ß√£o
    if not verificar_configuracao():
        return
    
    try:
        # Inicializa o agente
        print("ü§ñ Inicializando agente...")
        agent = ServiceDeskAgent()
        agent.inicializar()
        
        # Inicia processamento de entradas
        processar_entrada_usuario(agent)
        
    except Exception as e:
        print(f"‚ùå Erro ao inicializar sistema: {e}")
        print("üí° Verifique se:")
        print("   - Os PDFs est√£o na pasta 'Pdf_Imersao_IA'")
        print("   - A GOOGLE_API_KEY est√° configurada")
        print("   - Todas as depend√™ncias est√£o instaladas")
        print("   - Voc√™ tem conex√£o com a internet")


if __name__ == "__main__":
    main()
