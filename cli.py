"""
Interface de linha de comando para o sistema de Service Desk com IA.
Sistema integrado de triagem e RAG para consulta de pol√≠ticas.
"""
import os
import sys
from typing import Optional
from src.config.settings import GOOGLE_API_KEY
from src.chains import TriagemChain
from src.tools.rag_local import RAGSystemLocal


class ServiceDeskCLI:
    """
    Interface de linha de comando para o sistema de Service Desk.
    """
    
    def __init__(self):
        """Inicializa o sistema CLI."""
        self.triagem_chain = None
        self.rag_system = None
        self.initialized = False
        
    def verificar_configuracao(self) -> bool:
        """Verifica se a configura√ß√£o est√° correta."""
        if not GOOGLE_API_KEY:
            print("‚ùå Erro: GOOGLE_API_KEY n√£o configurada no arquivo .env")
            print("üí° Crie um arquivo .env na raiz do projeto com:")
            print("   GOOGLE_API_KEY=sua_chave_aqui")
            return False
        return True
    
    def inicializar_sistemas(self) -> None:
        """Inicializa os sistemas de triagem e RAG."""
        if self.initialized:
            return
            
        print("üöÄ Inicializando sistemas...")
        
        try:
            # Inicializa sistema de triagem
            print("üîß Carregando sistema de triagem...")
            self.triagem_chain = TriagemChain()
            
            # Inicializa sistema RAG
            print("üìö Carregando sistema RAG...")
            self.rag_system = RAGSystemLocal()
            self.rag_system.inicializar()
            
            self.initialized = True
            print("‚úÖ Sistemas inicializados com sucesso!\n")
            
        except Exception as e:
            print(f"‚ùå Erro ao inicializar sistemas: {e}")
            sys.exit(1)
    
    def exibir_menu(self) -> None:
        """Exibe o menu principal."""
        print("=" * 60)
        print("üè¢ SISTEMA DE SERVICE DESK - CARRARO DESENVOLVIMENTO")
        print("=" * 60)
        print("1. üìù Fazer pergunta (Triagem + RAG)")
        print("2. üîç Apenas triagem (classificar mensagem)")
        print("3. üìö Apenas consulta RAG (buscar em pol√≠ticas)")
        print("4. üß™ Executar testes autom√°ticos")
        print("5. ‚ÑπÔ∏è  Informa√ß√µes do sistema")
        print("0. üö™ Sair")
        print("=" * 60)
    
    def processar_pergunta_completa(self) -> None:
        """Processa uma pergunta usando triagem + RAG."""
        print("\nüìù MODO: Triagem + RAG")
        print("Digite sua pergunta ou solicita√ß√£o:")
        pergunta = input("> ").strip()
        
        if not pergunta:
            print("‚ùå Pergunta n√£o pode estar vazia.")
            return
        
        print("\nüîç Processando...")
        
        try:
            # 1. Triagem
            resultado_triagem = self.triagem_chain.processar(pergunta)
            print(f"\nüìä TRIAGEM:")
            print(f"   Decis√£o: {resultado_triagem['decis√£o']}")
            print(f"   Urg√™ncia: {resultado_triagem['urgencia']}")
            if resultado_triagem['campos_faltantes']:
                print(f"   Campos faltantes: {', '.join(resultado_triagem['campos_faltantes'])}")
            
            # 2. RAG (se for AUTO_RESOLVER ou PEDIR_INFO)
            if resultado_triagem['decis√£o'] in ['AUTO_RESOLVER', 'PEDIR_INFO']:
                print(f"\nüìö CONSULTA RAG:")
                resultado_rag = self.rag_system.consultar(pergunta)
                print(f"   Resposta: {resultado_rag['resposta']}")
                
                if resultado_rag['documentos_relevantes']:
                    print(f"\nüìÑ Documentos consultados:")
                    for doc in resultado_rag['documentos_relevantes']:
                        print(f"   ‚Ä¢ {os.path.basename(doc['fonte'])}")
            
            # 3. Recomenda√ß√£o final
            print(f"\nüí° RECOMENDA√á√ÉO:")
            if resultado_triagem['decis√£o'] == 'AUTO_RESOLVER':
                print("   ‚úÖ Esta pergunta pode ser respondida automaticamente com base nas pol√≠ticas.")
            elif resultado_triagem['decis√£o'] == 'PEDIR_INFO':
                print("   ‚ùì Solicite mais informa√ß√µes espec√≠ficas do usu√°rio.")
            else:  # ABRIR_CHAMADO
                print("   üé´ Abra um chamado no sistema de Service Desk.")
                
        except Exception as e:
            print(f"‚ùå Erro ao processar pergunta: {e}")
    
    def processar_apenas_triagem(self) -> None:
        """Processa apenas a triagem de uma mensagem."""
        print("\nüîç MODO: Apenas Triagem")
        print("Digite a mensagem para classificar:")
        mensagem = input("> ").strip()
        
        if not mensagem:
            print("‚ùå Mensagem n√£o pode estar vazia.")
            return
        
        print("\nüîç Classificando...")
        
        try:
            resultado = self.triagem_chain.processar(mensagem)
            
            print(f"\nüìä RESULTADO DA TRIAGEM:")
            print(f"   Decis√£o: {resultado['decis√£o']}")
            print(f"   Urg√™ncia: {resultado['urgencia']}")
            if resultado['campos_faltantes']:
                print(f"   Campos faltantes: {', '.join(resultado['campos_faltantes'])}")
            
            # Explica√ß√£o da decis√£o
            print(f"\nüí° EXPLICA√á√ÉO:")
            if resultado['decis√£o'] == 'AUTO_RESOLVER':
                print("   Esta mensagem pode ser respondida automaticamente com base nas pol√≠ticas da empresa.")
            elif resultado['decis√£o'] == 'PEDIR_INFO':
                print("   Esta mensagem precisa de mais informa√ß√µes para ser processada adequadamente.")
            else:  # ABRIR_CHAMADO
                print("   Esta mensagem requer abertura de um chamado no sistema de Service Desk.")
                
        except Exception as e:
            print(f"‚ùå Erro ao processar triagem: {e}")
    
    def processar_apenas_rag(self) -> None:
        """Processa apenas consulta RAG."""
        print("\nüìö MODO: Apenas Consulta RAG")
        print("Digite sua pergunta sobre pol√≠ticas da empresa:")
        pergunta = input("> ").strip()
        
        if not pergunta:
            print("‚ùå Pergunta n√£o pode estar vazia.")
            return
        
        print("\nüîç Buscando nas pol√≠ticas...")
        
        try:
            resultado = self.rag_system.consultar(pergunta)
            
            print(f"\nüí° RESPOSTA:")
            print(f"   {resultado['resposta']}")
            
            if resultado['documentos_relevantes']:
                print(f"\nüìÑ DOCUMENTOS CONSULTADOS:")
                for doc in resultado['documentos_relevantes']:
                    print(f"   ‚Ä¢ {os.path.basename(doc['fonte'])}")
                    print(f"     {doc['conteudo'][:100]}...")
                    
        except Exception as e:
            print(f"‚ùå Erro ao consultar RAG: {e}")
    
    def executar_testes_automaticos(self) -> None:
        """Executa testes autom√°ticos do sistema."""
        print("\nüß™ MODO: Testes Autom√°ticos")
        print("Executando testes do sistema...")
        
        # Testes de triagem
        print("\nüîç Testando sistema de triagem...")
        testes_triagem = [
            "Como abrir um chamado?",
            "√öltimo dia de pagamento √© hoje e minha m√°quina quebrou, como solicito outra?",
            "Onde consultar as f√©rias que eu tenho direito?",
            "Solicito exce√ß√£o para trabalhar 5 dias remoto"
        ]
        
        for i, teste in enumerate(testes_triagem, 1):
            print(f"\n   Teste {i}: {teste}")
            try:
                resultado = self.triagem_chain.processar(teste)
                print(f"   ‚úÖ {resultado['decis√£o']} - {resultado['urgencia']}")
            except Exception as e:
                print(f"   ‚ùå Erro: {e}")
        
        # Testes de RAG
        print("\nüìö Testando sistema RAG...")
        testes_rag = [
            "Qual √© a pol√≠tica de home office?",
            "Como funciona o reembolso de despesas?",
            "Quais s√£o as regras de e-mail corporativo?"
        ]
        
        for i, teste in enumerate(testes_rag, 1):
            print(f"\n   Teste {i}: {teste}")
            try:
                resultado = self.rag_system.consultar(teste)
                print(f"   ‚úÖ Resposta gerada ({len(resultado['resposta'])} caracteres)")
            except Exception as e:
                print(f"   ‚ùå Erro: {e}")
        
        print("\n‚úÖ Testes conclu√≠dos!")
    
    def exibir_informacoes_sistema(self) -> None:
        """Exibe informa√ß√µes sobre o sistema."""
        print("\n‚ÑπÔ∏è  INFORMA√á√ïES DO SISTEMA")
        print("=" * 40)
        print(f"üìä Documentos carregados: {len(self.rag_system.docs)}")
        print(f"üîß Sistema de triagem: ‚úÖ Ativo")
        print(f"üìö Sistema RAG: ‚úÖ Ativo")
        print(f"ü§ñ Modelo LLM: Gemini 1.5 Flash")
        print(f"üîç Embeddings: HuggingFace (local)")
        print(f"üìÅ Pasta de PDFs: {self.rag_system.pdf_folder}")
        
        if self.rag_system.docs:
            print(f"\nüìÑ Documentos dispon√≠veis:")
            for doc in self.rag_system.docs:
                fonte = doc.metadata.get('source', 'Desconhecida')
                print(f"   ‚Ä¢ {os.path.basename(fonte)}")
    
    def executar(self) -> None:
        """Executa o sistema CLI principal."""
        print("üè¢ Sistema de Service Desk com IA - Carraro Desenvolvimento")
        print("Inicializando...\n")
        
        # Verifica configura√ß√£o
        if not self.verificar_configuracao():
            return
        
        # Inicializa sistemas
        self.inicializar_sistemas()
        
        # Loop principal
        while True:
            try:
                self.exibir_menu()
                opcao = input("Escolha uma op√ß√£o: ").strip()
                
                if opcao == "1":
                    self.processar_pergunta_completa()
                elif opcao == "2":
                    self.processar_apenas_triagem()
                elif opcao == "3":
                    self.processar_apenas_rag()
                elif opcao == "4":
                    self.executar_testes_automaticos()
                elif opcao == "5":
                    self.exibir_informacoes_sistema()
                elif opcao == "0":
                    print("\nüëã Obrigado por usar o sistema! At√© logo!")
                    break
                else:
                    print("‚ùå Op√ß√£o inv√°lida. Tente novamente.")
                
                input("\n‚è∏Ô∏è  Pressione Enter para continuar...")
                print("\n" + "="*60 + "\n")
                
            except KeyboardInterrupt:
                print("\n\nüëã Sistema interrompido pelo usu√°rio. At√© logo!")
                break
            except Exception as e:
                print(f"\n‚ùå Erro inesperado: {e}")
                input("Pressione Enter para continuar...")


def main():
    """Fun√ß√£o principal."""
    cli = ServiceDeskCLI()
    cli.executar()


if __name__ == "__main__":
    main()
